<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.vicmob.shoppingmall.web.goodsAPI.dao.MallEvaluateMapper" >
  <resultMap id="BaseResultMap" type="com.vicmob.shoppingmall.web.goodsAPI.entity.MallEvaluate" >
    <id column="evaluateId" property="evaluateid" jdbcType="INTEGER" />
    <result column="customerId" property="customerid" jdbcType="INTEGER" />
    <result column="minaId" property="minaid" jdbcType="INTEGER" />
    <result column="orderId" property="orderid" jdbcType="INTEGER" />
    <result column="classifyId" property="classifyid" jdbcType="INTEGER" />
    <result column="secondClassifyId" property="secondclassifyid" jdbcType="INTEGER" />
    <result column="goodsId" property="goodsid" jdbcType="INTEGER" />
    <result column="specId" property="specid" jdbcType="INTEGER" />
    <result column="isAnonymous" property="isanonymous" jdbcType="INTEGER" />
    <result column="evalLevel" property="evallevel" jdbcType="INTEGER" />
    <result column="evalContent" property="evalcontent" jdbcType="VARCHAR" />
    <result column="evalPic" property="evalpic" jdbcType="VARCHAR" />
    <result column="evalTime" property="evaltime" jdbcType="TIMESTAMP" />
    <result column="storeReply" property="storereply" jdbcType="VARCHAR" />
    <result column="replyTime" property="replytime" jdbcType="TIMESTAMP" />
    <result column="deleteFlag" property="deleteflag" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    evaluateId, customerId, minaId, orderId, classifyId, secondClassifyId, goodsId, specId, 
    isAnonymous, evalLevel, evalContent, evalPic, evalTime, storeReply, replyTime, deleteFlag
  </sql>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.vicmob.shoppingmall.web.goodsAPI.entity.MallEvaluateExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from mall_evaluate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleAndPage" resultMap="BaseResultMap" parameterType="com.vicmob.shoppingmall.web.goodsAPI.entity.MallEvaluateExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from mall_evaluate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.vicmob.shoppingmall.web.goodsAPI.entity.MallEvaluateExample" >
    delete from mall_evaluate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="countByExample" parameterType="com.vicmob.shoppingmall.web.goodsAPI.entity.MallEvaluateExample" resultType="java.lang.Integer" >
    select count(*) from mall_evaluate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update mall_evaluate
    <set >
      <if test="record.evaluateid != null" >
        evaluateId = #{record.evaluateid,jdbcType=INTEGER},
      </if>
      <if test="record.customerid != null" >
        customerId = #{record.customerid,jdbcType=INTEGER},
      </if>
      <if test="record.minaid != null" >
        minaId = #{record.minaid,jdbcType=INTEGER},
      </if>
      <if test="record.orderid != null" >
        orderId = #{record.orderid,jdbcType=INTEGER},
      </if>
      <if test="record.classifyid != null" >
        classifyId = #{record.classifyid,jdbcType=INTEGER},
      </if>
      <if test="record.secondclassifyid != null" >
        secondClassifyId = #{record.secondclassifyid,jdbcType=INTEGER},
      </if>
      <if test="record.goodsid != null" >
        goodsId = #{record.goodsid,jdbcType=INTEGER},
      </if>
      <if test="record.specid != null" >
        specId = #{record.specid,jdbcType=INTEGER},
      </if>
      <if test="record.isanonymous != null" >
        isAnonymous = #{record.isanonymous,jdbcType=INTEGER},
      </if>
      <if test="record.evallevel != null" >
        evalLevel = #{record.evallevel,jdbcType=INTEGER},
      </if>
      <if test="record.evalcontent != null" >
        evalContent = #{record.evalcontent,jdbcType=VARCHAR},
      </if>
      <if test="record.evalpic != null" >
        evalPic = #{record.evalpic,jdbcType=VARCHAR},
      </if>
      <if test="record.evaltime != null" >
        evalTime = #{record.evaltime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.storereply != null" >
        storeReply = #{record.storereply,jdbcType=VARCHAR},
      </if>
      <if test="record.replytime != null" >
        replyTime = #{record.replytime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deleteflag != null" >
        deleteFlag = #{record.deleteflag,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update mall_evaluate
    set evaluateId = #{record.evaluateid,jdbcType=INTEGER},
      customerId = #{record.customerid,jdbcType=INTEGER},
      minaId = #{record.minaid,jdbcType=INTEGER},
      orderId = #{record.orderid,jdbcType=INTEGER},
      classifyId = #{record.classifyid,jdbcType=INTEGER},
      secondClassifyId = #{record.secondclassifyid,jdbcType=INTEGER},
      goodsId = #{record.goodsid,jdbcType=INTEGER},
      specId = #{record.specid,jdbcType=INTEGER},
      isAnonymous = #{record.isanonymous,jdbcType=INTEGER},
      evalLevel = #{record.evallevel,jdbcType=INTEGER},
      evalContent = #{record.evalcontent,jdbcType=VARCHAR},
      evalPic = #{record.evalpic,jdbcType=VARCHAR},
      evalTime = #{record.evaltime,jdbcType=TIMESTAMP},
      storeReply = #{record.storereply,jdbcType=VARCHAR},
      replyTime = #{record.replytime,jdbcType=TIMESTAMP},
      deleteFlag = #{record.deleteflag,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from mall_evaluate
    where evaluateId = #{evaluateid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from mall_evaluate
    where evaluateId = #{evaluateid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.vicmob.shoppingmall.web.goodsAPI.entity.MallEvaluate" useGeneratedKeys="true" keyProperty="evaluateid" >
    insert into mall_evaluate (customerId, minaId, orderId, 
      classifyId, secondClassifyId, goodsId, 
      specId, isAnonymous, evalLevel, 
      evalContent, evalPic, evalTime, 
      storeReply, replyTime, deleteFlag
      )
    values (#{customerid,jdbcType=INTEGER}, #{minaid,jdbcType=INTEGER}, #{orderid,jdbcType=INTEGER}, 
      #{classifyid,jdbcType=INTEGER}, #{secondclassifyid,jdbcType=INTEGER}, #{goodsid,jdbcType=INTEGER}, 
      #{specid,jdbcType=INTEGER}, #{isanonymous,jdbcType=INTEGER}, #{evallevel,jdbcType=INTEGER}, 
      #{evalcontent,jdbcType=VARCHAR}, #{evalpic,jdbcType=VARCHAR}, #{evaltime,jdbcType=TIMESTAMP}, 
      #{storereply,jdbcType=VARCHAR}, #{replytime,jdbcType=TIMESTAMP}, #{deleteflag,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.vicmob.shoppingmall.web.goodsAPI.entity.MallEvaluate" useGeneratedKeys="true" keyProperty="evaluateid" >
    insert into mall_evaluate
    <trim prefix="(" suffix=")" suffixOverrides="," >
      customerId,
      minaId,
      orderId,
      classifyId,
      secondClassifyId,
      goodsId,
      specId,
      isAnonymous,
      evalLevel,
      evalContent,
      evalPic,
      evalTime,
      storeReply,
      replyTime,
      deleteFlag,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{customerid,jdbcType=INTEGER},
      #{minaid,jdbcType=INTEGER},
      #{orderid,jdbcType=INTEGER},
      #{classifyid,jdbcType=INTEGER},
      #{secondclassifyid,jdbcType=INTEGER},
      #{goodsid,jdbcType=INTEGER},
      #{specid,jdbcType=INTEGER},
      #{isanonymous,jdbcType=INTEGER},
      #{evallevel,jdbcType=INTEGER},
      #{evalcontent,jdbcType=VARCHAR},
      #{evalpic,jdbcType=VARCHAR},
      #{evaltime,jdbcType=TIMESTAMP},
      #{storereply,jdbcType=VARCHAR},
      #{replytime,jdbcType=TIMESTAMP},
      #{deleteflag,jdbcType=INTEGER},
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.vicmob.shoppingmall.web.goodsAPI.entity.MallEvaluate" >
    update mall_evaluate
    <set >
      <if test="customerid != null" >
        customerId = #{customerid,jdbcType=INTEGER},
      </if>
      <if test="minaid != null" >
        minaId = #{minaid,jdbcType=INTEGER},
      </if>
      <if test="orderid != null" >
        orderId = #{orderid,jdbcType=INTEGER},
      </if>
      <if test="classifyid != null" >
        classifyId = #{classifyid,jdbcType=INTEGER},
      </if>
      <if test="secondclassifyid != null" >
        secondClassifyId = #{secondclassifyid,jdbcType=INTEGER},
      </if>
      <if test="goodsid != null" >
        goodsId = #{goodsid,jdbcType=INTEGER},
      </if>
      <if test="specid != null" >
        specId = #{specid,jdbcType=INTEGER},
      </if>
      <if test="isanonymous != null" >
        isAnonymous = #{isanonymous,jdbcType=INTEGER},
      </if>
      <if test="evallevel != null" >
        evalLevel = #{evallevel,jdbcType=INTEGER},
      </if>
      <if test="evalcontent != null" >
        evalContent = #{evalcontent,jdbcType=VARCHAR},
      </if>
      <if test="evalpic != null" >
        evalPic = #{evalpic,jdbcType=VARCHAR},
      </if>
      <if test="evaltime != null" >
        evalTime = #{evaltime,jdbcType=TIMESTAMP},
      </if>
      <if test="storereply != null" >
        storeReply = #{storereply,jdbcType=VARCHAR},
      </if>
      <if test="replytime != null" >
        replyTime = #{replytime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleteflag != null" >
        deleteFlag = #{deleteflag,jdbcType=INTEGER},
      </if>
    </set>
    where evaluateId = #{evaluateid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.vicmob.shoppingmall.web.goodsAPI.entity.MallEvaluate" >
    update mall_evaluate
    set customerId = #{customerid,jdbcType=INTEGER},
      minaId = #{minaid,jdbcType=INTEGER},
      orderId = #{orderid,jdbcType=INTEGER},
      classifyId = #{classifyid,jdbcType=INTEGER},
      secondClassifyId = #{secondclassifyid,jdbcType=INTEGER},
      goodsId = #{goodsid,jdbcType=INTEGER},
      specId = #{specid,jdbcType=INTEGER},
      isAnonymous = #{isanonymous,jdbcType=INTEGER},
      evalLevel = #{evallevel,jdbcType=INTEGER},
      evalContent = #{evalcontent,jdbcType=VARCHAR},
      evalPic = #{evalpic,jdbcType=VARCHAR},
      evalTime = #{evaltime,jdbcType=TIMESTAMP},
      storeReply = #{storereply,jdbcType=VARCHAR},
      replyTime = #{replytime,jdbcType=TIMESTAMP},
      deleteFlag = #{deleteflag,jdbcType=INTEGER}
    where evaluateId = #{evaluateid,jdbcType=INTEGER}
  </update>

  <select id="selectEvaluateNum" resultType="com.vicmob.shoppingmall.web.goodsAPI.model.MallEvaluateNumVO">
  select count(1) as allNum,
  (select count(1) from mall_evaluate where evalPic is not null and evalPic!="" and minaId = #{minaId} and goodsId = #{goodsId} and deleteFlag != 1 and
    evaluateId not in (select evaluateId from mall_evaluate where customerId != #{customerId} and deleteFlag = 2)) as picNum,
  (select count(1) from mall_evaluate where (evalLevel &gt; 3) and minaId = #{minaId} and goodsId = #{goodsId} and
    evaluateId not in (select evaluateId from mall_evaluate where customerId != #{customerId} and deleteFlag = 2)) as goodNum,
  (select count(1) from mall_evaluate where evalLevel = 3 and minaId = #{minaId} and goodsId = #{goodsId} and
    evaluateId not in (select evaluateId from mall_evaluate where customerId != #{customerId} and deleteFlag = 2)) as midNum,
  (select count(1) from mall_evaluate where (evalLevel &lt; 3) and minaId = #{minaId} and goodsId = #{goodsId} and
    evaluateId not in (select evaluateId from mall_evaluate where customerId != #{customerId} and deleteFlag = 2)) as badNum
  from mall_evaluate where minaId = #{minaId} and goodsId = #{goodsId} and
    evaluateId not in (select evaluateId from mall_evaluate where customerId != #{customerId} and deleteFlag = 2)
  </select>

  <select id="selectMallEvaluateList" resultType="com.vicmob.shoppingmall.web.goodsAPI.model.MallEvaluateVO">
    select a.*,b.nickName,b.avatar from mall_evaluate a
    left join bc_customer b on a.customerId = b.customerId
    where  a.minaId = #{minaId} and a.goodsId = #{goodsId} and a.deleteFlag != 1 and
    evaluateId not in (select evaluateId from mall_evaluate where customerId != #{customerId} and deleteFlag = 2)
    order by evalTime desc
  </select>
  <sql id="Base_Column_List1">
    a.evaluateId, a.customerId, a.minaId, a.orderId, a.classifyId, a.secondClassifyId, a.goodsId, a.specId,
    a.isAnonymous, a.evalLevel, a.evalContent, a.evalPic, a.evalTime, a.storeReply , a.deleteFlag,
  </sql>
  <select id="selectMallEvaluateListByType" resultType="com.vicmob.shoppingmall.web.goodsAPI.model.MallEvaluateVO">
    select <include refid="Base_Column_List1"/>
    (CASE
    WHEN DATE_FORMAT(a.replyTime,"%Y-%m-%d")=DATE_FORMAT(curdate(),"%Y-%m-%d") THEN '当天'
    WHEN DATE_FORMAT(a.replyTime,"%Y-%m-%d")=DATE_FORMAT(DATE_SUB(curdate(),INTERVAL 1 DAY),"%Y-%m-%d") THEN '昨天'
    WHEN DATE_FORMAT(a.replyTime,"%Y-%m-%d")=DATE_FORMAT(DATE_SUB(curdate(),INTERVAL 2 DAY),"%Y-%m-%d") THEN '前天'
    ELSE a.replyTime END)replyTime,b.nickName,b.avatar from mall_evaluate a
    left join bc_customer b on a.customerId = b.customerId
    where  a.minaId = #{minaId} and a.goodsId = #{goodsId} and a.deleteFlag!= 1
    and evaluateId not in (select evaluateId from mall_evaluate where customerId != #{customerId} and deleteFlag = 2)
    <if test="evaluateType == 'pic' " >
     and (a.evalPic is not null and a.evalPic!="")
    </if>
    <if test="evaluateType == 'good' " >
      and evalLevel &gt; 3
    </if>
    <if test="evaluateType == 'mid' " >
      and evalLevel = 3
    </if>
    <if test="evaluateType == 'bad' " >
      and evalLevel &lt; 3
    </if>
    order by a.evalTime desc
  </select>

</mapper>